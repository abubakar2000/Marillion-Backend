#!/usr/bin/env node

/**
 * Module dependencies.
 */

const { readFileSync } = require("fs");
var app = require("../app");
var debug = require("debug")("api:server");
var http = require("http");
var https = require("https");
const path = require("path");

/**
 * Get port from environment and store in Express.
 */

var port = process.env.PORT || "1337";
app.set("port", port);

/**
 * Create HTTP server.
 */

// var server = http.createServer(app);

var privateKey = readFileSync(path.join(__dirname, "./secrets/privkey1.pem"));
var certificate = readFileSync(path.join(__dirname, "./secrets/cert1.pem"));

var sslServer = https.createServer(
  {
    cert: certificate,
    key: privateKey,
  },
  app
);

/**
 * Listen on provided port, on all network interfaces.
 */

sslServer.listen(1337);
sslServer.on("error", onError);
sslServer.on("listening", onListening);
sslServer.addListener("listening", () => {
  console.log("MARILLION SERVER STARTED...");
  console.log(sslServer.address().address);
  console.log(sslServer.address().port);
});

server.listen(1337);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  // var addr = server.address();
  var addr = "0.0.0.0";
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
